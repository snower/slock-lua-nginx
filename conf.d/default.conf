server {
    listen 80;
    default_type application/json;

    location /poll/event {
        include allow_cross;

        content_by_lua_block {
            local cjson = require "cjson"
            local slock = require "slock"
            
            local default_seted = ngx.var.arg_default_seted or "false"
            local keep_seted = ngx.var.arg_keep_seted or "false"
            local event_key = ngx.var.arg_key or ""
            local wait_timeout = tonumber(ngx.var.arg_timeout) or 60
            local expried_time = math.max(tonumber(ngx.var.arg_expried) or (wait_timeout * 2), 60)

            local sendResult = function(err_code, err_message)
                ngx.say(cjson.encode({
                    code = err_code,
                    msg = err_message,
                }))
            end
            if event_key == "" then
                return sendResult(400, "event key is empty")
            end

            local slock_client = slock:get("client")
            local event = nil
            if default_seted ~= "false" then
                event = slock_client:newDefaultSetEvent(event_key, 5, expried_time)
            else
                event = slock_client:newDefaultClearEvent(event_key, 5, expried_time)
            end

            if keep_seted == "false" then
                local ok, err = event:waitAndTimeoutRetryClear(wait_timeout)
                if not ok then
                    return sendResult(504, "wait event timeout")
                end
            else
                local ok, err = event:wait(wait_timeout)
                if not ok then
                    return sendResult(504, "wait event timeout")
                end
            end
            return sendResult(0, "succed")
        }
    }

    location /poll/message {
        include allow_cross;

        content_by_lua_block {
            local cjson = require "cjson"
            local redis = require "resty.redis"
            local slock = require "slock"
            
            local default_seted = ngx.var.arg_default_seted or "false"
            local keep_seted = ngx.var.arg_keep_seted or "false"
            local event_key = ngx.var.arg_key or ""
            local wait_timeout = tonumber(ngx.var.arg_timeout) or 60
            local expried_time = math.max(tonumber(ngx.var.arg_expried) or (wait_timeout * 2), 60)

            local sendResult = function(err_code, err_message, data)
                ngx.say(cjson.encode({
                    code = err_code,
                    msg = err_message,
                    data = data,
                }))
            end
            if event_key == "" then
                return sendResult(400, "event key is empty")
            end

            local slock_client = slock:get("client")
            local event = nil
            if default_seted ~= "false" then
                event = slock_client:newDefaultSetEvent(event_key, 5, expried_time)
            else
                event = slock_client:newDefaultClearEvent(event_key, 5, expried_time)
            end

            if keep_seted == "false" then
                local ok, err = event:waitAndTimeoutRetryClear(wait_timeout)
                if not ok then
                    return sendResult(504, "wait event timeout")
                end
            else
                local ok, err = event:wait(wait_timeout)
                if not ok then
                    return sendResult(504, "wait event timeout")
                end
            end

            local redis_host = os.getenv("REDIS_HOST") or "127.0.0.1"
            local redis_port = tonumber(os.getenv("REDIS_PORT")) or 6379
            local redis_db = tonumber(os.getenv("REDIS_DB")) or 0
            redis_client = redis:new()
            redis_client:set_timeouts(5000, wait_timeout * 500, wait_timeout * 500)
            local ok, err = redis_client:connect(redis_host, redis_port)
            if not ok then
                return sendResult(502, "redis connect fail")
            end
            if redis_db > 0 then
                local ok, err = redis_client:select(redis_db)
                if not ok then
                    return sendResult(500, "select database fail")
                end  
            end
            local message, err = redis_client:get('polling:message:' .. event_key)
            if not message or message == ngx.null then
                return sendResult(404, "redis get fail")
            end
            redis_client:set_keepalive(7200000, 16)
            return sendResult(0, "succed", cjson.decode(message))
        }
    }

    location /poll/group/message {
        include allow_cross;

        content_by_lua_block {
            local cjson = require "cjson"
            local redis = require "resty.redis"
            local slock = require "slock"
            
            local keep_seted = ngx.var.arg_keep_seted or "false"
            local group_key = ngx.var.arg_key or ""
            local client_id = tonumber(ngx.var.arg_client_id) or 0
            local version_id = tonumber(ngx.var.arg_msg_id) or 0
            local wait_timeout = tonumber(ngx.var.arg_timeout) or 60
            local expried_time = math.max(tonumber(ngx.var.arg_expried) or (wait_timeout * 2), 60)

            local sendResult = function(err_code, err_message, data)
                ngx.say(cjson.encode({
                    code = err_code,
                    msg = err_message,
                    data = data,
                }))
            end
            if group_key == "" then
                return sendResult(400, "group key is empty")
            end

            local slock_client = slock:get("client")
            local event = slock_client:newGroupEvent(group_key, client_id, version_id, 5, expried_time)
            if keep_seted == "false" then
                local ok, err = event:waitAndTimeoutRetryClear(wait_timeout)
                if not ok then
                    return sendResult(504, "wait timeout")
                end
            else
                local ok, err = event:wait(wait_timeout)
                if not ok then
                    return sendResult(504, "wait timeout")
                end
            end

            local lock = slock_client:newLock('polling:group:message:' .. group_key, wait_timeout, 0)
            local lok, lerr = lock:acquire()
            if not lok then
                return sendResult(500, "message lock fail")
            end

            local redis_host = os.getenv("REDIS_HOST") or "127.0.0.1"
            local redis_port = tonumber(os.getenv("REDIS_PORT")) or 6379
            local redis_db = tonumber(os.getenv("REDIS_DB")) or 0
            redis_client = redis:new()
            redis_client:set_timeouts(5000, wait_timeout * 500, wait_timeout * 500)
            local ok, err = redis_client:connect(redis_host, redis_port)
            if not ok then
                return sendResult(502, "redis connect fail")
            end
            if redis_db > 0 then
                local ok, err = redis_client:select(redis_db)
                if not ok then
                    return sendResult(500, "select database fail")
                end  
            end
            local message, err = redis_client:get('polling:group:message:' .. group_key .. ":" .. version_id)
            if not message or message == ngx.null then
                return sendResult(404, "redis get fail")
            end
            redis_client:set_keepalive(7200000, 16)
            return sendResult(0, "succed", cjson.decode(message))
        }
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

    location / {
        root   /usr/local/openresty/nginx/html;
        index  index.html index.htm;
    }
}