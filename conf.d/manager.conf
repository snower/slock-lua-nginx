server {
    listen 8080;
    default_type application/json;
    lua_need_request_body on;

    location /poll/event/set {
        content_by_lua_block {
            local cjson = require "cjson"
            local slock = require "slock"
            
            local default_seted = ngx.var.arg_default_seted or "false"
            local event_key = ngx.var.arg_key or ""
            local expried_time = math.max(tonumber(ngx.var.arg_expried) or 60, 60)

            local sendResult = function(err_code, err_message)
                ngx.say(cjson.encode({
                    code = err_code,
                    msg = err_message,
                }))
            end
            if event_key == "" then
                return sendResult(400, "event key is empty")
            end

            local slock_client = slock:get("client")
            local event = nil
            if default_seted ~= "false" then
                event = slock_client:newDefaultSetEvent(event_key, 5, expried_time)
            else
                event = slock_client:newDefaultClearEvent(event_key, 5, expried_time)
            end

            local ok, err = event:set()
            if not ok then
                return sendResult(500, "set event timeout")
            end
            return sendResult(0, "succed")
        }
    }

    location /poll/message/send {
        content_by_lua_block {
            local cjson = require "cjson"
            local redis = require "resty.redis"
            local slock = require "slock"
            
            local default_seted = ngx.var.arg_default_seted or "false"
            local event_key = ngx.var.arg_key or ""
            local expried_time = math.max(tonumber(ngx.var.arg_expried) or 60, 60)

            local sendResult = function(err_code, err_message, data)
                ngx.say(cjson.encode({
                    code = err_code,
                    msg = err_message,
                    data = data,
                }))
            end
            if event_key == "" then
                return sendResult(400, "event key is empty")
            end
            local body = ngx.req.get_body_data()
            if body == nil then
                return sendResult(400, "body empty")
            end
            local message = cjson.decode(body)
            if message == nil then
                return sendResult(400, "message error")
            end

            local redis_host = os.getenv("REDIS_HOST") or "127.0.0.1"
            local redis_port = tonumber(os.getenv("REDIS_PORT")) or 6379
            local redis_db = tonumber(os.getenv("REDIS_DB")) or 0
            redis_client = redis:new()
            redis_client:set_timeouts(5000, 30000, 30000)
            local ok, err = redis_client:connect(redis_host, redis_port)
            if not ok then
                return sendResult(502, "redis connect fail")
            end
            if redis_db > 0 then
                local ok, err = redis_client:select(redis_db)
                if err ~= nil then
                    return sendResult(500, "select database fail")
                end  
            end
            ok, err = redis_client:set('slock:message:' .. event_key, cjson.encode(message), "EX", expried_time + 60)
            if not ok then
                return sendResult(500, "redis get fail")
            end
            redis_client:set_keepalive(7200000, 16)
            
            local slock_client = slock:get("client")
            local event = nil
            if default_seted ~= "false" then
                event = slock_client:newDefaultSetEvent(event_key, 5, expried_time)
            else
                event = slock_client:newDefaultClearEvent(event_key, 5, expried_time)
            end

            ok, err = event:set()
            if not ok then
                return sendResult(500, "set event timeout")
            end
            return sendResult(0, "succed", message)
        }
    }

    location /poll/group/message/send {
        content_by_lua_block {
            local cjson = require "cjson"
            local redis = require "resty.redis"
            local slock = require "slock"

            local group_key = ngx.var.arg_key or ""
            local client_id = tonumber(ngx.var.arg_client_id) or 0
            local expried_time = math.max(tonumber(ngx.var.arg_expried) or 60, 60)

            local sendResult = function(err_code, err_message, data)
                ngx.say(cjson.encode({
                    code = err_code,
                    msg = err_message,
                    data = data,
                }))
            end
            if group_key == "" then
                return sendResult(400, "group key is empty")
            end
            local body = ngx.req.get_body_data()
            if body == nil then
                return sendResult(400, "body empty")
            end
            local message = cjson.decode(body)
            if message == nil then
                return sendResult(400, "message error")
            end

            local redis_host = os.getenv("REDIS_HOST") or "127.0.0.1"
            local redis_port = tonumber(os.getenv("REDIS_PORT")) or 6379
            local redis_db = tonumber(os.getenv("REDIS_DB")) or 0
            redis_client = redis:new()
            redis_client:set_timeouts(5000, 30000, 30000)
            local ok, err = redis_client:connect(redis_host, redis_port)
            if not ok then
                return sendResult(502, "redis connect fail")
            end
            if redis_db > 0 then
                local ok, err = redis_client:select(redis_db)
                if err ~= nil then
                    return sendResult(500, "select database fail")
                end  
            end

            local slock_client = slock:get("client")
            local lock = slock_client:newLock('slock:group:message:' .. group_key, 5, 10)
            local lok, lerr = lock:acquire()
            if not lok then
                return sendResult(500, "message lock fail")
            end

            local event = slock_client:newGroupEvent(group_key, client_id, 0, 5, expried_time)
            local wok, werr, version_id = event:wakeup()
            if not wok then
                local ok, err = event:clear()
                if not ok then
                    lock:releasetry()
                    return sendResult(500, "event wakeup fail")
                end
                wok, werr, version_id = event:wakeup()
                if not wok then
                    lock:releasetry()
                    return sendResult(500, "event wakeup fail")
                end
                wok, werr, version_id = event:wakeup()
                if not wok then
                    lock:releasetry()
                    return sendResult(500, "event wakeup fail")
                end
            end

            local ok, err = redis_client:set('slock:group:message:' .. group_key .. ":" .. (version_id - 1), cjson.encode(message), "EX", expried_time + 60)
            if not ok then
                lock:releasetry()
                return sendResult(500, "redis get fail")
            end
            lock:releasetry()
            redis_client:set_keepalive(7200000, 16)
            return sendResult(0, "succed", {
                msg_id = (version_id - 1), 
                message = message
            })
        }
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

    location / {
        root   /usr/local/openresty/nginx/html;
        index  index.html index.htm;
    }
}